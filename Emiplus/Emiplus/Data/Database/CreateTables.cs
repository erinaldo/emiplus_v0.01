using Emiplus.Data.Core;
using Emiplus.Data.Helpers;
using FirebirdSql.Data.FirebirdClient;
using SqlKata.Execution;
using System.IO;
using System.Linq;

namespace Emiplus.Data.Database
{
    internal class CreateTables
    {
        private QueryFactory dbLocal;
        private QueryFactory dbPdrao;

        private string _PathPadrao { get; set; }
        private string _PathLocal { get; set; }
        private string _PathDB { get; set; }

        private const string _user = "sysdba";
        private const string _pass = "masterkey";
        private const string _db = "sysdba";
        private const string _host = "localhost";

        public CreateTables()
        {
            _PathPadrao = IniFile.Read("Path", "LOCAL") + @"\Update\PADRAO.fdb";
            _PathLocal = IniFile.Read("Path", "LOCAL") + @"\EMIPLUS.fdb";
            _PathDB = IniFile.Read("PathDatabase", "LOCAL") + @"\EMIPLUS.fdb";

            var connectPadrao = new Connect();
            connectPadrao.update = true;
            dbPdrao = connectPadrao.Open();

            var connectLocal = new Connect();
            connectPadrao.update = false;
            dbLocal = connectLocal.Open();
        }

        private void CreateGenerator(string trigger, string tabela, string generator)
        {
            FbConnection SQLCon = new FbConnection(
                $"character set=NONE;initial catalog={_PathDB};user id={_user};data source={_host};user id={_db};Password={_pass};Pooling=true;Dialect=3"
            );

            FbCommand cmd;
            FbDataReader res;

            string query1 = "CREATE GENERATOR " + generator + ";";
            string query2 = $@"CREATE TRIGGER {trigger} FOR {tabela} ACTIVE BEFORE INSERT POSITION 0 AS DECLARE VARIABLE tmp DECIMAL(18,0); BEGIN IF (NEW.ID IS NULL) THEN NEW.ID = GEN_ID({generator}, 1); ELSE BEGIN tmp = GEN_ID({generator}, 0); if (tmp < new.ID) then tmp = GEN_ID({generator}, new.ID-tmp); END END";

            SQLCon.Open();
            cmd = new FbCommand(query1, SQLCon);
            cmd.ExecuteNonQuery();

            cmd = new FbCommand(query2, SQLCon);
            cmd.ExecuteNonQuery();
            SQLCon.Close();
        }

        public void CreateTable(string table) => dbLocal.Select("CREATE TABLE " + table + "(id integer generated by default as identity primary key); ");

        public void CreateColumn(string table, string column, int type, int type_sub, int size)
        {
            string tipoCriar = "", tamanhoColuna = "";
            if (type == 16 && type_sub == 1)
            {
                tipoCriar = "NUMERIC(18,4)";
            }
            else if (type == 8)
            {
                //integer
                tipoCriar = "INTEGER";
            }
            else if (type == 12)
            {
                //date
                tipoCriar = "DATE";
            }
            else if (type == 13)
            {
                //time
                tipoCriar = "TIME";
            }
            else if (type == 35)
            {
                //timestamp
                tipoCriar = "TIMESTAMP";
            }
            else if (type == 37)
            {
                //varchar
                if (size == 0)
                {
                    tamanhoColuna = "255";
                }
                else
                {
                    tamanhoColuna = size.ToString();
                }

                tipoCriar = "VARCHAR(" + tamanhoColuna + ")";
            }

            dbLocal.Select("ALTER TABLE " + table + " ADD " + column + " " + tipoCriar + ";");
        }

        public void CheckTables()
        {
            if (!File.Exists(_PathPadrao))
            {
                return;
            }

            var data = dbPdrao.Select(@"SELECT
              R.RDB$RELATION_NAME as tabela,
              R.RDB$FIELD_NAME as coluna,
              R.RDB$FIELD_SOURCE,
              F.RDB$FIELD_LENGTH as tamanho,
              F.RDB$FIELD_TYPE as tipo,
              F.RDB$FIELD_SCALE,
              F.RDB$FIELD_SUB_TYPE as subtipo
            FROM
              RDB$RELATION_FIELDS R
              JOIN RDB$FIELDS F
                ON F.RDB$FIELD_NAME = R.RDB$FIELD_SOURCE
              JOIN RDB$RELATIONS RL
                ON RL.RDB$RELATION_NAME = R.RDB$RELATION_NAME
            WHERE
              COALESCE(R.RDB$SYSTEM_FLAG, 0) = 0
              AND
              COALESCE(RL.RDB$SYSTEM_FLAG, 0) = 0
              AND
              RL.RDB$VIEW_BLR IS NULL
            ORDER BY
              R.RDB$RELATION_NAME,
              R.RDB$FIELD_POSITION");
            foreach (var item in data)
            {
                string coluna = "", tabela = "";
                int tipo = 0, tamanho = 0, subtipo = 0;

                coluna = item.COLUNA.Trim();
                tabela = item.TABELA.Trim();
                tipo = item.TIPO;
                subtipo = item.SUBTIPO == null ? 0 : item.SUBTIPO;
                tamanho = item.TAMANHO;

                var localTabelas = dbLocal.Select(@"select f.rdb$relation_name as tabela, f.rdb$field_name as coluna
                    from rdb$relation_fields f
                    join rdb$relations r on f.rdb$relation_name = r.rdb$relation_name
                    and r.rdb$view_blr is null
                    and(r.rdb$system_flag is null or r.rdb$system_flag = 0)
                    WHERE f.rdb$relation_name = '" + tabela + "' order by 1, f.rdb$field_position;");

                if (localTabelas.Count() == 0)
                {
                    CreateTable(tabela);
                }

                var localColunas = dbLocal.Select(@"SELECT
              R.RDB$RELATION_NAME as tabela,
              R.RDB$FIELD_NAME as coluna,
              R.RDB$FIELD_SOURCE,
              F.RDB$FIELD_LENGTH as tamanho,
              F.RDB$FIELD_TYPE as tipo,
              F.RDB$FIELD_SCALE,
              F.RDB$FIELD_SUB_TYPE
            FROM
              RDB$RELATION_FIELDS R
              JOIN RDB$FIELDS F
                ON F.RDB$FIELD_NAME = R.RDB$FIELD_SOURCE
              JOIN RDB$RELATIONS RL
                ON RL.RDB$RELATION_NAME = R.RDB$RELATION_NAME
            WHERE
              COALESCE(R.RDB$SYSTEM_FLAG, 0) = 0
              AND
              COALESCE(RL.RDB$SYSTEM_FLAG, 0) = 0
              AND
              RL.RDB$VIEW_BLR IS NULL
              AND R.RDB$FIELD_NAME = '" + coluna + "' AND R.RDB$RELATION_NAME = '" + tabela + "' ORDER BY R.RDB$RELATION_NAME, R.RDB$FIELD_POSITION");
                if (localColunas.Count() == 0)
                {
                    CreateColumn(tabela, coluna, tipo, subtipo, tamanho);
                }
            }

            var padraoGenerators = dbPdrao.Select(@"SELECT RDB$GENERATOR_NAME as generator FROM Rdb$Generators WHERE RDB$GENERATOR_NAME like 'GEN_%';");
            foreach (var itemP in padraoGenerators)
            {
                var trigger = itemP.GENERATOR.Trim().Replace("GEN_", "").Replace("_ID", "");
                InsertGenerator(itemP.GENERATOR.Trim(), trigger);
            }

            var consumidorFinal = dbLocal.Select(@"SELECT NOME FROM PESSOA WHERE NOME = 'Consumidor Final'");
            if (consumidorFinal.Count() == 0)
            {
                dbLocal.Select(@"INSERT INTO PESSOA (TIPO, EXCLUIR, NOME) VALUES('Clientes', 0, 'Consumidor Final');");
            }

            var formaPgto = dbLocal.Select(@"SELECT NOME FROM FORMAPGTO");
            if (formaPgto.Count() == 0)
            {
                dbLocal.Select($@"INSERT INTO FORMAPGTO (EXCLUIR, NOME) VALUES (0, 'DINHEIRO');");
                dbLocal.Select($@"INSERT INTO FORMAPGTO (EXCLUIR, NOME) VALUES (0, 'CHEQUE');");
                dbLocal.Select($@"INSERT INTO FORMAPGTO (EXCLUIR, NOME) VALUES (0, 'CARTÃO DE DÉBITO');");
                dbLocal.Select($@"INSERT INTO FORMAPGTO (EXCLUIR, NOME) VALUES (0, 'CARTÃO DE CRÉDITO');");
                dbLocal.Select($@"INSERT INTO FORMAPGTO (EXCLUIR, NOME) VALUES (0, 'CREDIÁRIO');");
                dbLocal.Select($@"INSERT INTO FORMAPGTO (EXCLUIR, NOME) VALUES (0, 'BOLETO');");
            }

            var despesas = dbLocal.Select(@"SELECT NOME FROM CATEGORIA");
            if (despesas.Count() == 0)
            {
                int idSync = Validation.RandomSecurity();
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Aluguel', 'Despesas', '{idSync + 51}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Água', 'Despesas', '{idSync + 52}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Energia Elétrica', 'Despesas', '{idSync + 53}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'IPTU', 'Despesas', '{idSync + 54}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Telefone Fixo', 'Despesas', '{idSync + 55}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Telefone Celular Empresarial', 'Despesas', '{idSync + 56}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Internet', 'Despesas', '{idSync + 57}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Manutenção Predial', 'Despesas', '{idSync + 58}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Seguro Predial', 'Despesas', '{idSync + 59}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Serviço de Limpeza', 'Despesas', '{idSync + 60}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Salários', 'Despesas', '{idSync + 61}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Previdência Social (INSS)', 'Despesas', '{idSync + 62}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'FGTS', 'Despesas', '{idSync + 63}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, '13° Salário', 'Despesas', '{idSync + 64}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Férias', 'Despesas', '{idSync + 65}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Horas Extras', 'Despesas', '{idSync + 66}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Rescisão Contratual', 'Despesas', '{idSync + 67}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Comissão', 'Despesas', '{idSync + 68}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Vale Transporte', 'Despesas', '{idSync + 69}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Plano de Saúde', 'Despesas', '{idSync + 70}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Vale Refeição', 'Despesas', '{idSync + 71}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Adiantamento', 'Despesas', '{idSync + 72}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Tarifas Bancárias', 'Despesas', '{idSync + 73}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Alvará', 'Despesas', '{idSync + 74}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Contribuição Sindical', 'Despesas', '{idSync + 75}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Pró-labora', 'Despesas', '{idSync + 76}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Distribuição de lucros', 'Despesas', '{idSync + 77}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Contador', 'Despesas', '{idSync + 78}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Combustível', 'Despesas', '{idSync + 79}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Correios', 'Despesas', '{idSync + 80}', 'CREATE');");
                dbLocal.Select($@"INSERT INTO CATEGORIA (EXCLUIR, NOME, TIPO, ID_SYNC, STATUS_SYNC) VALUES (0, 'Marketing e Publicidade', 'Despesas', '{idSync + 81}', 'CREATE');");
            }
        }

        private void InsertGenerator(string generatorName, string triggerName)
        {
            var localGenerators = dbLocal.Select(@"SELECT RDB$GENERATOR_NAME as generator FROM Rdb$Generators WHERE RDB$GENERATOR_NAME like '" + generatorName + "%';");
            if (localGenerators.Count() == 0)
            {
                var triggers = dbLocal.Select(@"select * from RDB$TRIGGERS where RDB$trigger_name like '" + triggerName + "%'");

                if (triggers.Count() == 0)
                {
                    string generator = "", trigger = "", tabela = "";

                    generator = generatorName;

                    tabela = generator.Replace("_ID", "").Replace("GEN_", "");

                    trigger = tabela + "_BI";

                    CreateGenerator(trigger, tabela, generator);
                }
            }
        }
    }
}